version: "3.8"

services:
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
    container_name: redpanda-0
    networks:
      - opent_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9644/v1/status/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.7.1
    networks:
      - opent_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
        connect:
          enabled: false
    ports:
      - 8080:8080
    depends_on:
      redpanda-0:
        condition: service_healthy

  redpanda-connect-generator:
    image: docker.redpanda.com/redpandadata/connect:latest
    container_name: redpanda-connect-generator
    volumes:
      - ./pipeline-generator.yml:/etc/redpanda/connect/pipeline.yml
    environment:
      # Connect to the Redpanda cluster (adjust as needed)
      CONNECT_BOOTSTRAP_SERVERS: redpanda-0:9092
      # Additional environment variables for your data generator connector (e.g., using kafka_franz) can be added here
    networks:
      - opent_network
    depends_on:
      - redpanda-0

  redpanda-connect-otel:
    image: docker.redpanda.com/redpandadata/connect:latest
    container_name: redpanda-connect-otel
    volumes:
      - ./pipeline-otel.yml:/etc/redpanda/connect/pipeline.yml
    environment:
      # Connect to the Redpanda cluster
      CONNECT_BOOTSTRAP_SERVERS: redpanda-0:9092
      # Set the endpoint for the OpenTelemetry exporter to send trace data
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    networks:
      - opent_network
    depends_on:
      - redpanda-0
      - otel-collector

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver (commonly used for traces)
      - "55681:55681" # Optional: OTLP HTTP receiver (if enabled in your config)
    networks:
      - opent_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI port to view collected traces
    networks:
      - opent_network

volumes:
  redpanda-0:

networks:
  opent_network:
    driver: bridge
